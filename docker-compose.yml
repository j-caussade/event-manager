################################################################################
# Docker Compose Configuration for Eventura Application
#
# This file defines the services, networks, and volumes required to run:
# - MySQL database
# - Node.js backend application
# - phpMyAdmin for database management
#
# Environment variables are loaded from the `.env` file.
################################################################################

services:
  ##############################################################################
  # Database Service (MySQL 8.0)
  ##############################################################################
  db:
    image: mysql:8.0
    restart: on-failure # Restart container if it fails
    environment:
      # MySQL root and admin credentials
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_USER_PASSWORD}
      # Application database and user
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
    volumes:
      # Initialize database with schema, data, and database user permissions
      - ./database/schema.sql:/docker-entrypoint-initdb.d/1-schema.sql
      - ./database/init-db-users.sh:/docker-entrypoint-initdb.d/2-init-db-users.sh
      - ./database/data.sql:/docker-entrypoint-initdb.d/4-data.sql
      # Persist database data
      - mysql_data:/var/lib/mysql
    networks:
      - app-network

  ##############################################################################
  # Backend Service (Node.js)
  ##############################################################################
  app:
    build: . # Build the Docker image from the Dockerfile in the current directory
    ports:
      - "${PORT:-3000}:3000" # Map host port to container port (default: 3000)
    environment:
      NODE_ENV: ${NODE_ENV}
      DB_HOST: db # Use the 'db' service name as hostname
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - .:/usr/src/app # Mount the current directory for live code reloading
    depends_on:
      - db # Wait for the database to be ready before starting
    networks:
      - app-network

  ##############################################################################
  # phpMyAdmin Service
  ##############################################################################
  phpmyadmin:
    image: phpmyadmin:5.2-apache
    ports:
      - "${PHPMYADMIN_PORT:-8080}:80" # Map host port to container port (default: 8080)
    environment:
      PMA_HOST: db # Connect to the 'db' service
      PMA_PORT: 3306
      MYSQL_USER: ${MYSQL_USER}
      MYSQL_PASSWORD: ${MYSQL_USER_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
    depends_on:
      - db # Wait for the database to be ready before starting
    networks:
      - app-network

################################################################################
# Networks Configuration
################################################################################
networks:
  app-network:
    driver: bridge # Use a bridge network for inter-container communication

################################################################################
# Volumes Configuration
################################################################################
volumes:
  mysql_data: # Persist MySQL data even if the container is removed
